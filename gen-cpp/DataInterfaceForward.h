/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef DataInterfaceForward_H
#define DataInterfaceForward_H

#include <thrift/TDispatchProcessor.h>
#include "DataInterfaceForward_types.h"



class DataInterfaceForwardIf {
 public:
  virtual ~DataInterfaceForwardIf() {}
  virtual void dataBaseConn(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void dataOper(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void transactionBegin(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void transactionCommit(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void transactionRollBack(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void transactionEnd(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void dataSearchByTxt(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void dataSearchByMemory(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void lobSearch(std::string& _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void lobInsert(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara, const std::string& bytes) = 0;
  virtual void dataBaseDisconn(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void errInfo(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
  virtual void subscriptionRequest(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) = 0;
};

class DataInterfaceForwardIfFactory {
 public:
  typedef DataInterfaceForwardIf Handler;

  virtual ~DataInterfaceForwardIfFactory() {}

  virtual DataInterfaceForwardIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(DataInterfaceForwardIf* /* handler */) = 0;
};

class DataInterfaceForwardIfSingletonFactory : virtual public DataInterfaceForwardIfFactory {
 public:
  DataInterfaceForwardIfSingletonFactory(const boost::shared_ptr<DataInterfaceForwardIf>& iface) : iface_(iface) {}
  virtual ~DataInterfaceForwardIfSingletonFactory() {}

  virtual DataInterfaceForwardIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(DataInterfaceForwardIf* /* handler */) {}

 protected:
  boost::shared_ptr<DataInterfaceForwardIf> iface_;
};

class DataInterfaceForwardNull : virtual public DataInterfaceForwardIf {
 public:
  virtual ~DataInterfaceForwardNull() {}
  void dataBaseConn(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void dataOper(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void transactionBegin(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void transactionCommit(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void transactionRollBack(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void transactionEnd(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void dataSearchByTxt(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void dataSearchByMemory(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void lobSearch(std::string& /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void lobInsert(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */, const std::string& /* bytes */) {
    return;
  }
  void dataBaseDisconn(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void errInfo(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
  void subscriptionRequest(std::map<std::string, std::string> & /* _return */, const std::map<std::string, std::string> & /* mappara */) {
    return;
  }
};

typedef struct _DataInterfaceForward_dataBaseConn_args__isset {
  _DataInterfaceForward_dataBaseConn_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_dataBaseConn_args__isset;

class DataInterfaceForward_dataBaseConn_args {
 public:

  DataInterfaceForward_dataBaseConn_args() {
  }

  virtual ~DataInterfaceForward_dataBaseConn_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_dataBaseConn_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_dataBaseConn_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataBaseConn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataBaseConn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_dataBaseConn_pargs {
 public:


  virtual ~DataInterfaceForward_dataBaseConn_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataBaseConn_result__isset {
  _DataInterfaceForward_dataBaseConn_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataBaseConn_result__isset;

class DataInterfaceForward_dataBaseConn_result {
 public:

  DataInterfaceForward_dataBaseConn_result() {
  }

  virtual ~DataInterfaceForward_dataBaseConn_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_dataBaseConn_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_dataBaseConn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataBaseConn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataBaseConn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataBaseConn_presult__isset {
  _DataInterfaceForward_dataBaseConn_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataBaseConn_presult__isset;

class DataInterfaceForward_dataBaseConn_presult {
 public:


  virtual ~DataInterfaceForward_dataBaseConn_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_dataBaseConn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_dataOper_args__isset {
  _DataInterfaceForward_dataOper_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_dataOper_args__isset;

class DataInterfaceForward_dataOper_args {
 public:

  DataInterfaceForward_dataOper_args() {
  }

  virtual ~DataInterfaceForward_dataOper_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_dataOper_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_dataOper_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataOper_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataOper_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_dataOper_pargs {
 public:


  virtual ~DataInterfaceForward_dataOper_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataOper_result__isset {
  _DataInterfaceForward_dataOper_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataOper_result__isset;

class DataInterfaceForward_dataOper_result {
 public:

  DataInterfaceForward_dataOper_result() {
  }

  virtual ~DataInterfaceForward_dataOper_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_dataOper_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_dataOper_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataOper_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataOper_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataOper_presult__isset {
  _DataInterfaceForward_dataOper_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataOper_presult__isset;

class DataInterfaceForward_dataOper_presult {
 public:


  virtual ~DataInterfaceForward_dataOper_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_dataOper_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_transactionBegin_args__isset {
  _DataInterfaceForward_transactionBegin_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_transactionBegin_args__isset;

class DataInterfaceForward_transactionBegin_args {
 public:

  DataInterfaceForward_transactionBegin_args() {
  }

  virtual ~DataInterfaceForward_transactionBegin_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_transactionBegin_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_transactionBegin_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionBegin_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionBegin_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_transactionBegin_pargs {
 public:


  virtual ~DataInterfaceForward_transactionBegin_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionBegin_result__isset {
  _DataInterfaceForward_transactionBegin_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionBegin_result__isset;

class DataInterfaceForward_transactionBegin_result {
 public:

  DataInterfaceForward_transactionBegin_result() {
  }

  virtual ~DataInterfaceForward_transactionBegin_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_transactionBegin_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_transactionBegin_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionBegin_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionBegin_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionBegin_presult__isset {
  _DataInterfaceForward_transactionBegin_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionBegin_presult__isset;

class DataInterfaceForward_transactionBegin_presult {
 public:


  virtual ~DataInterfaceForward_transactionBegin_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_transactionBegin_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_transactionCommit_args__isset {
  _DataInterfaceForward_transactionCommit_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_transactionCommit_args__isset;

class DataInterfaceForward_transactionCommit_args {
 public:

  DataInterfaceForward_transactionCommit_args() {
  }

  virtual ~DataInterfaceForward_transactionCommit_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_transactionCommit_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_transactionCommit_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionCommit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionCommit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_transactionCommit_pargs {
 public:


  virtual ~DataInterfaceForward_transactionCommit_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionCommit_result__isset {
  _DataInterfaceForward_transactionCommit_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionCommit_result__isset;

class DataInterfaceForward_transactionCommit_result {
 public:

  DataInterfaceForward_transactionCommit_result() {
  }

  virtual ~DataInterfaceForward_transactionCommit_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_transactionCommit_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_transactionCommit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionCommit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionCommit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionCommit_presult__isset {
  _DataInterfaceForward_transactionCommit_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionCommit_presult__isset;

class DataInterfaceForward_transactionCommit_presult {
 public:


  virtual ~DataInterfaceForward_transactionCommit_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_transactionCommit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_transactionRollBack_args__isset {
  _DataInterfaceForward_transactionRollBack_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_transactionRollBack_args__isset;

class DataInterfaceForward_transactionRollBack_args {
 public:

  DataInterfaceForward_transactionRollBack_args() {
  }

  virtual ~DataInterfaceForward_transactionRollBack_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_transactionRollBack_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_transactionRollBack_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionRollBack_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionRollBack_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_transactionRollBack_pargs {
 public:


  virtual ~DataInterfaceForward_transactionRollBack_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionRollBack_result__isset {
  _DataInterfaceForward_transactionRollBack_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionRollBack_result__isset;

class DataInterfaceForward_transactionRollBack_result {
 public:

  DataInterfaceForward_transactionRollBack_result() {
  }

  virtual ~DataInterfaceForward_transactionRollBack_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_transactionRollBack_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_transactionRollBack_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionRollBack_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionRollBack_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionRollBack_presult__isset {
  _DataInterfaceForward_transactionRollBack_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionRollBack_presult__isset;

class DataInterfaceForward_transactionRollBack_presult {
 public:


  virtual ~DataInterfaceForward_transactionRollBack_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_transactionRollBack_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_transactionEnd_args__isset {
  _DataInterfaceForward_transactionEnd_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_transactionEnd_args__isset;

class DataInterfaceForward_transactionEnd_args {
 public:

  DataInterfaceForward_transactionEnd_args() {
  }

  virtual ~DataInterfaceForward_transactionEnd_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_transactionEnd_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_transactionEnd_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionEnd_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionEnd_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_transactionEnd_pargs {
 public:


  virtual ~DataInterfaceForward_transactionEnd_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionEnd_result__isset {
  _DataInterfaceForward_transactionEnd_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionEnd_result__isset;

class DataInterfaceForward_transactionEnd_result {
 public:

  DataInterfaceForward_transactionEnd_result() {
  }

  virtual ~DataInterfaceForward_transactionEnd_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_transactionEnd_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_transactionEnd_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_transactionEnd_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_transactionEnd_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_transactionEnd_presult__isset {
  _DataInterfaceForward_transactionEnd_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_transactionEnd_presult__isset;

class DataInterfaceForward_transactionEnd_presult {
 public:


  virtual ~DataInterfaceForward_transactionEnd_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_transactionEnd_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_dataSearchByTxt_args__isset {
  _DataInterfaceForward_dataSearchByTxt_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_dataSearchByTxt_args__isset;

class DataInterfaceForward_dataSearchByTxt_args {
 public:

  DataInterfaceForward_dataSearchByTxt_args() {
  }

  virtual ~DataInterfaceForward_dataSearchByTxt_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_dataSearchByTxt_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_dataSearchByTxt_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataSearchByTxt_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataSearchByTxt_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_dataSearchByTxt_pargs {
 public:


  virtual ~DataInterfaceForward_dataSearchByTxt_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataSearchByTxt_result__isset {
  _DataInterfaceForward_dataSearchByTxt_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataSearchByTxt_result__isset;

class DataInterfaceForward_dataSearchByTxt_result {
 public:

  DataInterfaceForward_dataSearchByTxt_result() {
  }

  virtual ~DataInterfaceForward_dataSearchByTxt_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_dataSearchByTxt_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_dataSearchByTxt_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataSearchByTxt_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataSearchByTxt_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataSearchByTxt_presult__isset {
  _DataInterfaceForward_dataSearchByTxt_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataSearchByTxt_presult__isset;

class DataInterfaceForward_dataSearchByTxt_presult {
 public:


  virtual ~DataInterfaceForward_dataSearchByTxt_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_dataSearchByTxt_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_dataSearchByMemory_args__isset {
  _DataInterfaceForward_dataSearchByMemory_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_dataSearchByMemory_args__isset;

class DataInterfaceForward_dataSearchByMemory_args {
 public:

  DataInterfaceForward_dataSearchByMemory_args() {
  }

  virtual ~DataInterfaceForward_dataSearchByMemory_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_dataSearchByMemory_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_dataSearchByMemory_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataSearchByMemory_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataSearchByMemory_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_dataSearchByMemory_pargs {
 public:


  virtual ~DataInterfaceForward_dataSearchByMemory_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataSearchByMemory_result__isset {
  _DataInterfaceForward_dataSearchByMemory_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataSearchByMemory_result__isset;

class DataInterfaceForward_dataSearchByMemory_result {
 public:

  DataInterfaceForward_dataSearchByMemory_result() {
  }

  virtual ~DataInterfaceForward_dataSearchByMemory_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_dataSearchByMemory_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_dataSearchByMemory_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataSearchByMemory_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataSearchByMemory_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataSearchByMemory_presult__isset {
  _DataInterfaceForward_dataSearchByMemory_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataSearchByMemory_presult__isset;

class DataInterfaceForward_dataSearchByMemory_presult {
 public:


  virtual ~DataInterfaceForward_dataSearchByMemory_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_dataSearchByMemory_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_lobSearch_args__isset {
  _DataInterfaceForward_lobSearch_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_lobSearch_args__isset;

class DataInterfaceForward_lobSearch_args {
 public:

  DataInterfaceForward_lobSearch_args() {
  }

  virtual ~DataInterfaceForward_lobSearch_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_lobSearch_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_lobSearch_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_lobSearch_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_lobSearch_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_lobSearch_pargs {
 public:


  virtual ~DataInterfaceForward_lobSearch_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_lobSearch_result__isset {
  _DataInterfaceForward_lobSearch_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_lobSearch_result__isset;

class DataInterfaceForward_lobSearch_result {
 public:

  DataInterfaceForward_lobSearch_result() : success() {
  }

  virtual ~DataInterfaceForward_lobSearch_result() throw() {}

  std::string success;

  _DataInterfaceForward_lobSearch_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_lobSearch_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_lobSearch_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_lobSearch_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_lobSearch_presult__isset {
  _DataInterfaceForward_lobSearch_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_lobSearch_presult__isset;

class DataInterfaceForward_lobSearch_presult {
 public:


  virtual ~DataInterfaceForward_lobSearch_presult() throw() {}

  std::string* success;

  _DataInterfaceForward_lobSearch_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_lobInsert_args__isset {
  _DataInterfaceForward_lobInsert_args__isset() : mappara(false), bytes(false) {}
  bool mappara;
  bool bytes;
} _DataInterfaceForward_lobInsert_args__isset;

class DataInterfaceForward_lobInsert_args {
 public:

  DataInterfaceForward_lobInsert_args() : bytes() {
  }

  virtual ~DataInterfaceForward_lobInsert_args() throw() {}

  std::map<std::string, std::string>  mappara;
  std::string bytes;

  _DataInterfaceForward_lobInsert_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  void __set_bytes(const std::string& val) {
    bytes = val;
  }

  bool operator == (const DataInterfaceForward_lobInsert_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    if (!(bytes == rhs.bytes))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_lobInsert_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_lobInsert_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_lobInsert_pargs {
 public:


  virtual ~DataInterfaceForward_lobInsert_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;
  const std::string* bytes;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_lobInsert_result__isset {
  _DataInterfaceForward_lobInsert_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_lobInsert_result__isset;

class DataInterfaceForward_lobInsert_result {
 public:

  DataInterfaceForward_lobInsert_result() {
  }

  virtual ~DataInterfaceForward_lobInsert_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_lobInsert_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_lobInsert_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_lobInsert_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_lobInsert_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_lobInsert_presult__isset {
  _DataInterfaceForward_lobInsert_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_lobInsert_presult__isset;

class DataInterfaceForward_lobInsert_presult {
 public:


  virtual ~DataInterfaceForward_lobInsert_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_lobInsert_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_dataBaseDisconn_args__isset {
  _DataInterfaceForward_dataBaseDisconn_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_dataBaseDisconn_args__isset;

class DataInterfaceForward_dataBaseDisconn_args {
 public:

  DataInterfaceForward_dataBaseDisconn_args() {
  }

  virtual ~DataInterfaceForward_dataBaseDisconn_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_dataBaseDisconn_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_dataBaseDisconn_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataBaseDisconn_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataBaseDisconn_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_dataBaseDisconn_pargs {
 public:


  virtual ~DataInterfaceForward_dataBaseDisconn_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataBaseDisconn_result__isset {
  _DataInterfaceForward_dataBaseDisconn_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataBaseDisconn_result__isset;

class DataInterfaceForward_dataBaseDisconn_result {
 public:

  DataInterfaceForward_dataBaseDisconn_result() {
  }

  virtual ~DataInterfaceForward_dataBaseDisconn_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_dataBaseDisconn_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_dataBaseDisconn_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_dataBaseDisconn_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_dataBaseDisconn_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_dataBaseDisconn_presult__isset {
  _DataInterfaceForward_dataBaseDisconn_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_dataBaseDisconn_presult__isset;

class DataInterfaceForward_dataBaseDisconn_presult {
 public:


  virtual ~DataInterfaceForward_dataBaseDisconn_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_dataBaseDisconn_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_errInfo_args__isset {
  _DataInterfaceForward_errInfo_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_errInfo_args__isset;

class DataInterfaceForward_errInfo_args {
 public:

  DataInterfaceForward_errInfo_args() {
  }

  virtual ~DataInterfaceForward_errInfo_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_errInfo_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_errInfo_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_errInfo_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_errInfo_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_errInfo_pargs {
 public:


  virtual ~DataInterfaceForward_errInfo_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_errInfo_result__isset {
  _DataInterfaceForward_errInfo_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_errInfo_result__isset;

class DataInterfaceForward_errInfo_result {
 public:

  DataInterfaceForward_errInfo_result() {
  }

  virtual ~DataInterfaceForward_errInfo_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_errInfo_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_errInfo_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_errInfo_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_errInfo_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_errInfo_presult__isset {
  _DataInterfaceForward_errInfo_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_errInfo_presult__isset;

class DataInterfaceForward_errInfo_presult {
 public:


  virtual ~DataInterfaceForward_errInfo_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_errInfo_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _DataInterfaceForward_subscriptionRequest_args__isset {
  _DataInterfaceForward_subscriptionRequest_args__isset() : mappara(false) {}
  bool mappara;
} _DataInterfaceForward_subscriptionRequest_args__isset;

class DataInterfaceForward_subscriptionRequest_args {
 public:

  DataInterfaceForward_subscriptionRequest_args() {
  }

  virtual ~DataInterfaceForward_subscriptionRequest_args() throw() {}

  std::map<std::string, std::string>  mappara;

  _DataInterfaceForward_subscriptionRequest_args__isset __isset;

  void __set_mappara(const std::map<std::string, std::string> & val) {
    mappara = val;
  }

  bool operator == (const DataInterfaceForward_subscriptionRequest_args & rhs) const
  {
    if (!(mappara == rhs.mappara))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_subscriptionRequest_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_subscriptionRequest_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class DataInterfaceForward_subscriptionRequest_pargs {
 public:


  virtual ~DataInterfaceForward_subscriptionRequest_pargs() throw() {}

  const std::map<std::string, std::string> * mappara;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_subscriptionRequest_result__isset {
  _DataInterfaceForward_subscriptionRequest_result__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_subscriptionRequest_result__isset;

class DataInterfaceForward_subscriptionRequest_result {
 public:

  DataInterfaceForward_subscriptionRequest_result() {
  }

  virtual ~DataInterfaceForward_subscriptionRequest_result() throw() {}

  std::map<std::string, std::string>  success;

  _DataInterfaceForward_subscriptionRequest_result__isset __isset;

  void __set_success(const std::map<std::string, std::string> & val) {
    success = val;
  }

  bool operator == (const DataInterfaceForward_subscriptionRequest_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const DataInterfaceForward_subscriptionRequest_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const DataInterfaceForward_subscriptionRequest_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _DataInterfaceForward_subscriptionRequest_presult__isset {
  _DataInterfaceForward_subscriptionRequest_presult__isset() : success(false) {}
  bool success;
} _DataInterfaceForward_subscriptionRequest_presult__isset;

class DataInterfaceForward_subscriptionRequest_presult {
 public:


  virtual ~DataInterfaceForward_subscriptionRequest_presult() throw() {}

  std::map<std::string, std::string> * success;

  _DataInterfaceForward_subscriptionRequest_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class DataInterfaceForwardClient : virtual public DataInterfaceForwardIf {
 public:
  DataInterfaceForwardClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  DataInterfaceForwardClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void dataBaseConn(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_dataBaseConn(const std::map<std::string, std::string> & mappara);
  void recv_dataBaseConn(std::map<std::string, std::string> & _return);
  void dataOper(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_dataOper(const std::map<std::string, std::string> & mappara);
  void recv_dataOper(std::map<std::string, std::string> & _return);
  void transactionBegin(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_transactionBegin(const std::map<std::string, std::string> & mappara);
  void recv_transactionBegin(std::map<std::string, std::string> & _return);
  void transactionCommit(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_transactionCommit(const std::map<std::string, std::string> & mappara);
  void recv_transactionCommit(std::map<std::string, std::string> & _return);
  void transactionRollBack(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_transactionRollBack(const std::map<std::string, std::string> & mappara);
  void recv_transactionRollBack(std::map<std::string, std::string> & _return);
  void transactionEnd(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_transactionEnd(const std::map<std::string, std::string> & mappara);
  void recv_transactionEnd(std::map<std::string, std::string> & _return);
  void dataSearchByTxt(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_dataSearchByTxt(const std::map<std::string, std::string> & mappara);
  void recv_dataSearchByTxt(std::map<std::string, std::string> & _return);
  void dataSearchByMemory(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_dataSearchByMemory(const std::map<std::string, std::string> & mappara);
  void recv_dataSearchByMemory(std::map<std::string, std::string> & _return);
  void lobSearch(std::string& _return, const std::map<std::string, std::string> & mappara);
  void send_lobSearch(const std::map<std::string, std::string> & mappara);
  void recv_lobSearch(std::string& _return);
  void lobInsert(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara, const std::string& bytes);
  void send_lobInsert(const std::map<std::string, std::string> & mappara, const std::string& bytes);
  void recv_lobInsert(std::map<std::string, std::string> & _return);
  void dataBaseDisconn(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_dataBaseDisconn(const std::map<std::string, std::string> & mappara);
  void recv_dataBaseDisconn(std::map<std::string, std::string> & _return);
  void errInfo(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_errInfo(const std::map<std::string, std::string> & mappara);
  void recv_errInfo(std::map<std::string, std::string> & _return);
  void subscriptionRequest(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara);
  void send_subscriptionRequest(const std::map<std::string, std::string> & mappara);
  void recv_subscriptionRequest(std::map<std::string, std::string> & _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class DataInterfaceForwardProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<DataInterfaceForwardIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (DataInterfaceForwardProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_dataBaseConn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dataOper(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transactionBegin(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transactionCommit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transactionRollBack(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_transactionEnd(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dataSearchByTxt(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dataSearchByMemory(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lobSearch(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_lobInsert(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dataBaseDisconn(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_errInfo(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscriptionRequest(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  DataInterfaceForwardProcessor(boost::shared_ptr<DataInterfaceForwardIf> iface) :
    iface_(iface) {
    processMap_["dataBaseConn"] = &DataInterfaceForwardProcessor::process_dataBaseConn;
    processMap_["dataOper"] = &DataInterfaceForwardProcessor::process_dataOper;
    processMap_["transactionBegin"] = &DataInterfaceForwardProcessor::process_transactionBegin;
    processMap_["transactionCommit"] = &DataInterfaceForwardProcessor::process_transactionCommit;
    processMap_["transactionRollBack"] = &DataInterfaceForwardProcessor::process_transactionRollBack;
    processMap_["transactionEnd"] = &DataInterfaceForwardProcessor::process_transactionEnd;
    processMap_["dataSearchByTxt"] = &DataInterfaceForwardProcessor::process_dataSearchByTxt;
    processMap_["dataSearchByMemory"] = &DataInterfaceForwardProcessor::process_dataSearchByMemory;
    processMap_["lobSearch"] = &DataInterfaceForwardProcessor::process_lobSearch;
    processMap_["lobInsert"] = &DataInterfaceForwardProcessor::process_lobInsert;
    processMap_["dataBaseDisconn"] = &DataInterfaceForwardProcessor::process_dataBaseDisconn;
    processMap_["errInfo"] = &DataInterfaceForwardProcessor::process_errInfo;
    processMap_["subscriptionRequest"] = &DataInterfaceForwardProcessor::process_subscriptionRequest;
  }

  virtual ~DataInterfaceForwardProcessor() {}
};

class DataInterfaceForwardProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  DataInterfaceForwardProcessorFactory(const ::boost::shared_ptr< DataInterfaceForwardIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< DataInterfaceForwardIfFactory > handlerFactory_;
};

class DataInterfaceForwardMultiface : virtual public DataInterfaceForwardIf {
 public:
  DataInterfaceForwardMultiface(std::vector<boost::shared_ptr<DataInterfaceForwardIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~DataInterfaceForwardMultiface() {}
 protected:
  std::vector<boost::shared_ptr<DataInterfaceForwardIf> > ifaces_;
  DataInterfaceForwardMultiface() {}
  void add(boost::shared_ptr<DataInterfaceForwardIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void dataBaseConn(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dataBaseConn(_return, mappara);
    }
    ifaces_[i]->dataBaseConn(_return, mappara);
    return;
  }

  void dataOper(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dataOper(_return, mappara);
    }
    ifaces_[i]->dataOper(_return, mappara);
    return;
  }

  void transactionBegin(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transactionBegin(_return, mappara);
    }
    ifaces_[i]->transactionBegin(_return, mappara);
    return;
  }

  void transactionCommit(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transactionCommit(_return, mappara);
    }
    ifaces_[i]->transactionCommit(_return, mappara);
    return;
  }

  void transactionRollBack(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transactionRollBack(_return, mappara);
    }
    ifaces_[i]->transactionRollBack(_return, mappara);
    return;
  }

  void transactionEnd(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->transactionEnd(_return, mappara);
    }
    ifaces_[i]->transactionEnd(_return, mappara);
    return;
  }

  void dataSearchByTxt(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dataSearchByTxt(_return, mappara);
    }
    ifaces_[i]->dataSearchByTxt(_return, mappara);
    return;
  }

  void dataSearchByMemory(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dataSearchByMemory(_return, mappara);
    }
    ifaces_[i]->dataSearchByMemory(_return, mappara);
    return;
  }

  void lobSearch(std::string& _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lobSearch(_return, mappara);
    }
    ifaces_[i]->lobSearch(_return, mappara);
    return;
  }

  void lobInsert(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara, const std::string& bytes) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->lobInsert(_return, mappara, bytes);
    }
    ifaces_[i]->lobInsert(_return, mappara, bytes);
    return;
  }

  void dataBaseDisconn(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dataBaseDisconn(_return, mappara);
    }
    ifaces_[i]->dataBaseDisconn(_return, mappara);
    return;
  }

  void errInfo(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->errInfo(_return, mappara);
    }
    ifaces_[i]->errInfo(_return, mappara);
    return;
  }

  void subscriptionRequest(std::map<std::string, std::string> & _return, const std::map<std::string, std::string> & mappara) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscriptionRequest(_return, mappara);
    }
    ifaces_[i]->subscriptionRequest(_return, mappara);
    return;
  }

};



#endif
